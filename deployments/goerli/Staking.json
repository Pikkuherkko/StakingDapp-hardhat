{
  "address": "0x31cB463f6137796D6F8e0a83Edb39C32bC10D32C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmToken",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        }
      ],
      "name": "StakeEther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newUnlockDate",
          "type": "uint256"
        }
      ],
      "name": "changeUnlockDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        }
      ],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        }
      ],
      "name": "getInterestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockPeriods",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        }
      ],
      "name": "getPositionById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "walletAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percentInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weiStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weiInterest",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "open",
              "type": "bool"
            }
          ],
          "internalType": "struct Staking.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "getPositionIdsForAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basisPoints",
          "type": "uint256"
        }
      ],
      "name": "modifyLockPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positionIdsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weiInterest",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x521c17d1702f65b6df2e143fd2eb4b062da78636f6e32f712dca4b0ccbc4f82f",
  "receipt": {
    "to": null,
    "from": "0x6E3A76980ff269E7BFed4dE532D4F03e0768b2DC",
    "contractAddress": "0x31cB463f6137796D6F8e0a83Edb39C32bC10D32C",
    "transactionIndex": 119,
    "gasUsed": "1560474",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc2294a823bf27f1277530c2e4af3a82d5c5b3349bfe005847478bd062cef3f36",
    "transactionHash": "0x521c17d1702f65b6df2e143fd2eb4b062da78636f6e32f712dca4b0ccbc4f82f",
    "logs": [],
    "blockNumber": 7854551,
    "cumulativeGasUsed": "28022781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd5bce816F394dD9a28F4f765521f2cd96c7c7727"
  ],
  "numDeployments": 1,
  "solcInputHash": "0f5e21eaea3d0106b3aab2d5f4b0d9f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"StakeEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"changeUnlockDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockPeriods\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"internalType\":\"struct Staking.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getPositionIdsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basisPoints\",\"type\":\"uint256\"}],\"name\":\"modifyLockPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionIdsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Farmtoken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Farmtoken is ERC20 {\\n    constructor() ERC20(\\\"Farmtoken\\\", \\\"FARM\\\") {\\n        _mint(msg.sender, 1000000 * 10 ** 18);\\n    } \\n    receive () external payable{}\\n    fallback () external payable{}\\n}\\n\",\"keccak256\":\"0x8892f68389be4753dfcfd68844521caa2ba564eebc8183e2034a57aba3cc7c2a\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Farmtoken.sol\\\";\\n\\ncontract Staking {\\n    address public owner;\\n    IERC20 public farmToken;\\n\\n    struct Position {\\n        uint256 positionId;\\n        address walletAddress;\\n        uint256 createdDate;\\n        uint256 unlockDate;\\n        uint256 percentInterest;\\n        uint256 weiStaked;\\n        uint256 weiInterest;\\n        bool open;\\n    }\\n\\n    Position position;\\n\\n    uint256 currentPositionId;\\n    mapping (uint256 => Position) public positions; // each position is queryble by ID\\n    mapping(address => uint256[]) public positionIdsByAddress; // each user can query their positions\\n    mapping(uint256 => uint256) public tiers; // find interest by number of days\\n    uint256[] lockPeriods;\\n\\n    constructor(address _farmToken) payable {\\n        owner = msg.sender;\\n        farmToken = IERC20(_farmToken);\\n        currentPositionId = 0;\\n        \\n        tiers[1] = 700; // 7%\\n        tiers[3] = 1000; // 10%\\n        tiers[6] = 1200; // 12%\\n        lockPeriods.push(1);\\n        lockPeriods.push(3);\\n        lockPeriods.push(6);\\n    }\\n\\n    function StakeEther(uint256 _numDays) external payable {\\n        require(tiers[_numDays] > 0, \\\"Lockup period not found\\\");\\n\\n        positions[currentPositionId] = Position(\\n            currentPositionId, \\n            msg.sender,\\n            block.timestamp,\\n            block.timestamp + (_numDays * 1 days),\\n            tiers[_numDays],\\n            msg.value,\\n            calculateInterest(tiers[_numDays], msg.value),\\n            true\\n        );\\n\\n        positionIdsByAddress[msg.sender].push(currentPositionId);\\n        currentPositionId++;\\n    }\\n\\n    function calculateInterest(uint256 _basisPoints, uint256 _weiAmount) private pure returns (uint256) {\\n        return _basisPoints * _weiAmount / 10000;\\n    }\\n\\n    function modifyLockPeriods(uint256 _numDays, uint256 _basisPoints) external {\\n        require(owner == msg.sender, \\\"Msg.sender not owner\\\");\\n        tiers[_numDays] = _basisPoints; // creating anew tier\\n        lockPeriods.push(_numDays);\\n    }\\n\\n    function getLockPeriods() external view returns (uint256[] memory) {\\n        return lockPeriods;\\n    }\\n\\n    function getInterestRate(uint256 _numDays) external view returns (uint256) {\\n        return tiers[_numDays];\\n    }\\n\\n    function getPositionById(uint256 _positionId) external view returns (Position memory) {\\n        return positions[_positionId];\\n    }\\n\\n    function getPositionIdsForAddress(address _walletAddress) external view returns (uint256[] memory) {\\n        return positionIdsByAddress[_walletAddress];\\n    }\\n\\n    function changeUnlockDate(uint256 _positionId, uint256 _newUnlockDate) external {\\n        require(owner == msg.sender, \\\"Msg.sender not owner\\\");\\n        positions[_positionId].unlockDate = _newUnlockDate;\\n    } \\n\\n    function closePosition(uint256 _positionId) external {\\n        require(positions[_positionId].walletAddress == msg.sender, \\\"msg.sender not position creator\\\");\\n        require(positions[_positionId].open == true, \\\"Position not open\\\");\\n        positions[_positionId].open = false;\\n\\n        if (block.timestamp > positions[_positionId].unlockDate) {\\n            (bool sent,) = payable(msg.sender).call{value: positions[_positionId].weiStaked}(\\\"\\\");\\n            require(sent, \\\"not sent\\\");\\n            uint256 amount = positions[_positionId].weiInterest;\\n            require(farmToken.transfer(msg.sender, amount), \\\"token transfer failed\\\");\\n        } else {\\n            (bool sent,) = payable(msg.sender).call{value: positions[_positionId].weiStaked}(\\\"\\\");\\n            require(sent, \\\"not sent\\\");\\n        }\\n    }\\n\\n    receive () external payable{}\\n\\n    fallback () external payable{}\\n\\n}\",\"keccak256\":\"0x8dbd029647a0ff4bceb4904fabb5e4ab260a9fb95c3fc9d23de834b67f64f3bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051620019b5380380620019b583398181016040528101906200002991906200019f565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a819055506102bc600d600060018152602001908152602001600020819055506103e8600d600060038152602001908152602001600020819055506104b0600d60006006815260200190815260200160002081905550600e60019080600181540180825580915050600190039060005260206000200160009091909190915055600e60039080600181540180825580915050600190039060005260206000200160009091909190915055600e600690806001815401808255809150506001900390600052602060002001600090919091909150555062000219565b6000815190506200019981620001ff565b92915050565b600060208284031215620001b257600080fd5b6000620001c28482850162000188565b91505092915050565b6000620001d882620001df565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200020a81620001cb565b81146200021657600080fd5b50565b61178c80620002296000396000f3fe6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063b0f0475b11610059578063b0f0475b146102a2578063b838ec86146102cb578063c2442f9314610308578063c7c9d05514610333576100cd565b80638da5cb5b1461020a57806399fbab8814610235578063a126d60114610279576100cd565b8063039af9eb146100cf5780630c196a741461010c5780630edfcbd01461014957806340d98a441461016557806341ee13be146101a257806345eae373146101cd576100cd565b366100cd57005b005b3480156100db57600080fd5b506100f660048036038101906100f19190610f3d565b61035c565b604051610103919061142f565b60405180910390f35b34801561011857600080fd5b50610133600480360381019061012e9190610f3d565b610374565b604051610140919061142f565b60405180910390f35b610163600480360381019061015e9190610f3d565b610391565b005b34801561017157600080fd5b5061018c60048036038101906101879190610eaf565b6105c2565b6040516101999190611316565b60405180910390f35b3480156101ae57600080fd5b506101b7610659565b6040516101c49190611316565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190610ed8565b6106b1565b604051610201919061142f565b60405180910390f35b34801561021657600080fd5b5061021f6106e2565b60405161022c91906112d2565b60405180910390f35b34801561024157600080fd5b5061025c60048036038101906102579190610f3d565b610706565b60405161027098979695949392919061144a565b60405180910390f35b34801561028557600080fd5b506102a0600480360381019061029b9190610f3d565b61077b565b005b3480156102ae57600080fd5b506102c960048036038101906102c49190610f66565b610b6f565b005b3480156102d757600080fd5b506102f260048036038101906102ed9190610f3d565b610c42565b6040516102ff9190611413565b60405180910390f35b34801561031457600080fd5b5061031d610d1d565b60405161032a9190611338565b60405180910390f35b34801561033f57600080fd5b5061035a60048036038101906103559190610f66565b610d43565b005b600d6020528060005260406000206000915090505481565b6000600d6000838152602001908152602001600020549050919050565b6000600d600083815260200190815260200160002054116103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de90611353565b60405180910390fd5b604051806101000160405280600a5481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001620151808361042c91906115a4565b42610437919061151d565b8152602001600d6000848152602001908152602001600020548152602001348152602001610478600d60008581526020019081526020016000205434610df0565b815260200160011515815250600b6000600a5481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550905050600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a549080600181540180825580915050600190039060005260206000200160009091909190915055600a60008154809291906105ba9061166a565b919050555050565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561064d57602002820191906000526020600020905b815481526020019060010190808311610639575b50505050509050919050565b6060600e8054806020026020016040519081016040528092919081815260200182805480156106a757602002820191906000526020600020905b815481526020019060010190808311610693575b5050505050905090565b600c60205281600052604060002081815481106106cd57600080fd5b90600052602060002001600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905088565b3373ffffffffffffffffffffffffffffffffffffffff16600b600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081690611373565b60405180910390fd5b60011515600b600083815260200190815260200160002060070160009054906101000a900460ff16151514610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090611393565b60405180910390fd5b6000600b600083815260200190815260200160002060070160006101000a81548160ff021916908315150217905550600b600082815260200190815260200160002060030154421115610aa85760003373ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060050154604051610912906112bd565b60006040518083038185875af1925050503d806000811461094f576040519150601f19603f3d011682016040523d82523d6000602084013e610954565b606091505b5050905080610998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906113f3565b60405180910390fd5b6000600b6000848152602001908152602001600020600601549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a109291906112ed565b602060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190610f14565b610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a98906113b3565b60405180910390fd5b5050610b6c565b60003373ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060050154604051610ae4906112bd565b60006040518083038185875af1925050503d8060008114610b21576040519150601f19603f3d011682016040523d82523d6000602084013e610b26565b606091505b5050905080610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b61906113f3565b60405180910390fd5b505b50565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf4906113d3565b60405180910390fd5b80600d600084815260200190815260200160002081905550600e8290806001815401808255809150506001900390600052602060002001600090919091909150555050565b610c4a610e13565b600b600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff1615151515815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc8906113d3565b60405180910390fd5b80600b6000848152602001908152602001600020600301819055505050565b60006127108284610e0191906115a4565b610e0b9190611573565b905092915050565b60405180610100016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600081359050610e7f81611711565b92915050565b600081519050610e9481611728565b92915050565b600081359050610ea98161173f565b92915050565b600060208284031215610ec157600080fd5b6000610ecf84828501610e70565b91505092915050565b60008060408385031215610eeb57600080fd5b6000610ef985828601610e70565b9250506020610f0a85828601610e9a565b9150509250929050565b600060208284031215610f2657600080fd5b6000610f3484828501610e85565b91505092915050565b600060208284031215610f4f57600080fd5b6000610f5d84828501610e9a565b91505092915050565b60008060408385031215610f7957600080fd5b6000610f8785828601610e9a565b9250506020610f9885828601610e9a565b9150509250929050565b6000610fae838361129f565b60208301905092915050565b610fc3816115fe565b82525050565b610fd2816115fe565b82525050565b6000610fe3826114d8565b610fed81856114f0565b9350610ff8836114c8565b8060005b838110156110295781516110108882610fa2565b975061101b836114e3565b925050600181019050610ffc565b5085935050505092915050565b61103f81611610565b82525050565b61104e81611610565b82525050565b61105d81611646565b82525050565b600061107060178361150c565b91507f4c6f636b757020706572696f64206e6f7420666f756e640000000000000000006000830152602082019050919050565b60006110b0601f8361150c565b91507f6d73672e73656e646572206e6f7420706f736974696f6e2063726561746f72006000830152602082019050919050565b60006110f060118361150c565b91507f506f736974696f6e206e6f74206f70656e0000000000000000000000000000006000830152602082019050919050565b600061113060158361150c565b91507f746f6b656e207472616e73666572206661696c656400000000000000000000006000830152602082019050919050565b600061117060148361150c565b91507f4d73672e73656e646572206e6f74206f776e65720000000000000000000000006000830152602082019050919050565b60006111b0600083611501565b9150600082019050919050565b60006111ca60088361150c565b91507f6e6f742073656e740000000000000000000000000000000000000000000000006000830152602082019050919050565b61010082016000820151611214600085018261129f565b5060208201516112276020850182610fba565b50604082015161123a604085018261129f565b50606082015161124d606085018261129f565b506080820151611260608085018261129f565b5060a082015161127360a085018261129f565b5060c082015161128660c085018261129f565b5060e082015161129960e0850182611036565b50505050565b6112a88161163c565b82525050565b6112b78161163c565b82525050565b60006112c8826111a3565b9150819050919050565b60006020820190506112e76000830184610fc9565b92915050565b60006040820190506113026000830185610fc9565b61130f60208301846112ae565b9392505050565b600060208201905081810360008301526113308184610fd8565b905092915050565b600060208201905061134d6000830184611054565b92915050565b6000602082019050818103600083015261136c81611063565b9050919050565b6000602082019050818103600083015261138c816110a3565b9050919050565b600060208201905081810360008301526113ac816110e3565b9050919050565b600060208201905081810360008301526113cc81611123565b9050919050565b600060208201905081810360008301526113ec81611163565b9050919050565b6000602082019050818103600083015261140c816111bd565b9050919050565b60006101008201905061142960008301846111fd565b92915050565b600060208201905061144460008301846112ae565b92915050565b600061010082019050611460600083018b6112ae565b61146d602083018a610fc9565b61147a60408301896112ae565b61148760608301886112ae565b61149460808301876112ae565b6114a160a08301866112ae565b6114ae60c08301856112ae565b6114bb60e0830184611045565b9998505050505050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115288261163c565b91506115338361163c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611568576115676116b3565b5b828201905092915050565b600061157e8261163c565b91506115898361163c565b925082611599576115986116e2565b5b828204905092915050565b60006115af8261163c565b91506115ba8361163c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115f3576115f26116b3565b5b828202905092915050565b60006116098261161c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061165182611658565b9050919050565b60006116638261161c565b9050919050565b60006116758261163c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116a8576116a76116b3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b61171a816115fe565b811461172557600080fd5b50565b61173181611610565b811461173c57600080fd5b50565b6117488161163c565b811461175357600080fd5b5056fea2646970667358221220176acac170c021f8bcb23de8da2442b462fac543750231040272197fb631436a64736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 748,
        "contract": "contracts/Staking.sol:Staking",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 751,
        "contract": "contracts/Staking.sol:Staking",
        "label": "farmToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 771,
        "contract": "contracts/Staking.sol:Staking",
        "label": "position",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Position)768_storage"
      },
      {
        "astId": 773,
        "contract": "contracts/Staking.sol:Staking",
        "label": "currentPositionId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 778,
        "contract": "contracts/Staking.sol:Staking",
        "label": "positions",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Position)768_storage)"
      },
      {
        "astId": 783,
        "contract": "contracts/Staking.sol:Staking",
        "label": "positionIdsByAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 787,
        "contract": "contracts/Staking.sol:Staking",
        "label": "tiers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 790,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lockPeriods",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Position)768_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Staking.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)768_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Position)768_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Position",
        "members": [
          {
            "astId": 753,
            "contract": "contracts/Staking.sol:Staking",
            "label": "positionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 755,
            "contract": "contracts/Staking.sol:Staking",
            "label": "walletAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 757,
            "contract": "contracts/Staking.sol:Staking",
            "label": "createdDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 759,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unlockDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 761,
            "contract": "contracts/Staking.sol:Staking",
            "label": "percentInterest",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 763,
            "contract": "contracts/Staking.sol:Staking",
            "label": "weiStaked",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 765,
            "contract": "contracts/Staking.sol:Staking",
            "label": "weiInterest",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 767,
            "contract": "contracts/Staking.sol:Staking",
            "label": "open",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}